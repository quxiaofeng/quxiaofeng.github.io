{"title":"Qt Reflection","slug":"qt-reflection","date":"2012-11-16T11:32:51.000Z","updated":"2018-04-21T08:18:25.482Z","comments":true,"path":"api/articles/qt-reflection.json","photos":[],"link":"","excerpt":"Explain what is reflection and how to implement reflection in Qt.","covers":null,"content":"<p>Explain what is reflection and how to implement reflection in Qt.</p>\n<a id=\"more\"></a>\n<h1 id=\"Reflection-反射\"><a href=\"#Reflection-反射\" class=\"headerlink\" title=\"Reflection 反射\"></a>Reflection 反射</h1><p>定义参见wiki</p>\n<ul>\n<li><a href=\"http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\" title=\"http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\" target=\"_blank\" rel=\"noopener\">反射 中文</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Reflection_(computer_programming)\" title=\"http://en.wikipedia.org/wiki/Reflection_(computer_programming)\" target=\"_blank\" rel=\"noopener\">Reflection in English</a></li>\n</ul>\n<p>简单说，是使用类与方法的名字的字符串，调用类和方法。</p>\n<p>在底层(如汇编)，程序与数据都是以数据形式存储的，都是可读的(如果放在RAM也都是可写的)，所以程序可以检查、修改自身。</p>\n<p>理论上C其实也可以修改自身。在知道程序在内存中的地址之后，以此地址声明一个指针，然后向此指针进行二进制读写。但这就是超出语言逾期的使用方法了。</p>\n<h1 id=\"两篇关于用Qt实现反射的帖子\"><a href=\"#两篇关于用Qt实现反射的帖子\" class=\"headerlink\" title=\"两篇关于用Qt实现反射的帖子\"></a>两篇关于用Qt实现反射的帖子</h1><ul>\n<li><a href=\"http://www.qtcentre.org/threads/42006-Reflection-on-Qt\" target=\"_blank\" rel=\"noopener\">Reflection on Qt</a></li>\n<li><a href=\"http://qt-project.org/forums/viewthread/18786\" target=\"_blank\" rel=\"noopener\">How to dynamically instantiate a class using the class name</a>. And this is a typical example.</li>\n</ul>\n<p>使用的是<a href=\"http://qt-project.org/doc/qt-4.8/qmetatype.html\" target=\"_blank\" rel=\"noopener\">QMetaType Class</a></p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>Ruby语言的例子</p>\n<pre><code># without reflection\nobj = Foo.new\nobj.hello\n\n# with reflection\nclass_name = &quot;Foo&quot;\nmethod = :hello\nobj = Kernel.const_get(class_name).new\nobj.send method\n</code></pre>","categories":[{"name":"coding","slug":"coding","count":26,"path":"api/categories/coding.json"}],"tags":[{"name":"coding","slug":"coding","count":10,"path":"api/tags/coding.json"},{"name":"qt","slug":"qt","count":2,"path":"api/tags/qt.json"},{"name":"c++","slug":"c","count":4,"path":"api/tags/c.json"}]}