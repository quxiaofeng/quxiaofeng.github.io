{"title":"A SWIG Example","slug":"swig-example","date":"2014-03-01T09:58:51.000Z","updated":"2018-04-21T08:18:25.482Z","comments":true,"path":"api/articles/swig-example.json","photos":["http://i.imgur.com/rPhlR7E.png"],"link":"","excerpt":"SWIGSWIG is stand along software development tool. It connects code programmed in C and C++ with many high-level programming languages including python. SWIG is used to parse C/C++ interfaces and generate the ‘glue code’ required for the above target languages to call into the C/C++ code. ","covers":["http://i.imgur.com/rPhlR7E.png","http://i.imgur.com/lHar1Ig.png"],"content":"<h2 id=\"SWIG\"><a href=\"#SWIG\" class=\"headerlink\" title=\"SWIG\"></a><a href=\"http://www.swig.org\" target=\"_blank\" rel=\"noopener\">SWIG</a></h2><p>SWIG is stand along software development tool. It connects code programmed in C and C++ with many high-level programming languages including python. SWIG is used to parse C/C++ interfaces and generate the ‘glue code’ required for the above target languages to call into the C/C++ code. </p>\n<a id=\"more\"></a>\n<p>The idea of SWIG is to create a dynamic python library module, which calls the SDK DLL. The structure is shown below.</p>\n<figure><br>  <img src=\"http://i.imgur.com/rPhlR7E.png\"><br>  <figcaption><br>  SWIG interfacing principle<br>  </figcaption><br></figure>\n\n<p>The SWIG compiles the DLL and H files under the instruction of the .i file (SWIG configuring file). The SWIG project generates the Python Dynamic Library file (pyd). This pyd file can be imported to python.</p>\n<h2 id=\"A-Basic-But-Not-Simple-Example\"><a href=\"#A-Basic-But-Not-Simple-Example\" class=\"headerlink\" title=\"A Basic But Not Simple Example\"></a>A Basic But Not Simple Example</h2><ul>\n<li><a href=\"https://github.com/quxiaofeng/swig-cpp-class-dll-wrapping-test\" target=\"_blank\" rel=\"noopener\">github repo</a></li>\n</ul>\n<h3 id=\"1-Make-a-little-DLL-project\"><a href=\"#1-Make-a-little-DLL-project\" class=\"headerlink\" title=\"1. Make a little DLL project.\"></a>1. Make a little DLL project.</h3><p>In the repo, this little DLL project is <strong>xiaoAdd</strong>. There is a <strong>class AddTest</strong>. This class has only one useful <strong>member function add</strong>.</p>\n<p><code>AddTest.h</code></p>\n<pre><code>/* AddTest.h */\n#pragma once\n\nclass __declspec(dllexport) AddTest\n{\npublic:\n    AddTest(void);\n    ~AddTest(void);\n    int add(int a, int b);\n};\n</code></pre><p><code>AddTest.cpp</code></p>\n<pre><code>/* AddTest.cpp */\n#include &quot;AddTest.h&quot;\n\nAddTest::AddTest(void)\n{\n}\n\nAddTest::~AddTest(void)\n{\n}\n\nint AddTest::add(int a, int b)\n{\n    return a+b;\n}\n</code></pre><p>Compile this project and get the results.</p>\n<pre><code>xiaoAdd.dll\nxiaoAdd.lib\nxiaoAdd.pdb\n</code></pre><h3 id=\"2-Make-a-Python-dynamic-module\"><a href=\"#2-Make-a-Python-dynamic-module\" class=\"headerlink\" title=\"2. Make a Python dynamic module\"></a>2. Make a Python dynamic module</h3><p>In the github repo, this module is xiaoA</p>\n<p><em>AddTest.h</em></p>\n<pre><code>/* AddTest.h */\n#pragma once\n\nclass __declspec(dllimport)AddTest\n{\npublic:\n    AddTest(void);\n    ~AddTest(void);\n    int add(int a, int b);\n};\n</code></pre><p><em>xiaoAddModule.i</em></p>\n<pre><code>/* xiaoAddModule.i */\n%module xiaoAddModule\n\n%{\n/* Put header files here or function declarations like below */\n#include &quot;AddTest.h&quot;\n%}\n\n%include &lt;windows.i&gt;\n%include &quot;AddTest.h&quot;\n</code></pre><h4 id=\"1-Compile-the-xiaoAddModule-i-for-xiaoAddModule-wrap-cxx\"><a href=\"#1-Compile-the-xiaoAddModule-i-for-xiaoAddModule-wrap-cxx\" class=\"headerlink\" title=\"1. Compile the xiaoAddModule.i for xiaoAddModule_wrap.cxx.\"></a>1. Compile the xiaoAddModule.i for xiaoAddModule_wrap.cxx.</h4><h4 id=\"2-Build-the-project-Reference-including\"><a href=\"#2-Build-the-project-Reference-including\" class=\"headerlink\" title=\"2. Build the project (Reference) including\"></a>2. Build the project (<a href=\"http://stackoverflow.com/questions/11693047/how-to-create-a-dll-with-swig-from-visual-studio-2010\" target=\"_blank\" rel=\"noopener\">Reference</a>) including</h4><pre><code>xiaoAddModule_wrap.cxx\nAddTest.h\nxiaoAdd.dll\nxiaoAdd.lib\n</code></pre><h4 id=\"3-Get-the-results\"><a href=\"#3-Get-the-results\" class=\"headerlink\" title=\"3. Get the results\"></a>3. Get the results</h4><pre><code>_xiaoAddModule.exp\n_xiaoAddModule.lib\n_xiaoAddModule.pdb\n_xiaoAddModule.pyd\nxiaoAddModule.py\nxiaoAddmodule.pyc\n</code></pre><h4 id=\"4-Write-the-Python-script-within-the-folder-where-above-results-are-located\"><a href=\"#4-Write-the-Python-script-within-the-folder-where-above-results-are-located\" class=\"headerlink\" title=\"4. Write the Python script within the folder where above results are located.\"></a>4. Write the Python script within the folder where above results are located.</h4><p><code>test.py</code></p>\n<pre><code># test.py\nimport xiaoAddModule\ninstance = xiaoAddModule.AddTest()\nprint &apos;The result of 2 + 3 = %r&apos; % (instance.add(2,3))\nwait = input(&quot;PRESS ENTER TO EXIT.&quot;)\n</code></pre><h2 id=\"A-Complex-Solution-For-A-Complex-Example\"><a href=\"#A-Complex-Solution-For-A-Complex-Example\" class=\"headerlink\" title=\"A Complex Solution For A Complex Example\"></a>A Complex Solution For A Complex Example</h2><p>When wrapping a complex 3rd party library, there are lots of classes and functions. We want to keep this interface nice and clean. A C++ wrapper is implemented as shown below.</p>\n<figure><br>  <img src=\"http://i.imgur.com/lHar1Ig.png\"><br>  <figcaption><br>  Double layer wrapping<br>  </figcaption><br></figure>\n\n","categories":[{"name":"coding","slug":"coding","count":26,"path":"api/categories/coding.json"}],"tags":[{"name":"coding","slug":"coding","count":10,"path":"api/tags/coding.json"},{"name":"python","slug":"python","count":7,"path":"api/tags/python.json"},{"name":"c++","slug":"c","count":4,"path":"api/tags/c.json"},{"name":"c","slug":"c","count":2,"path":"api/tags/c.json"}]}